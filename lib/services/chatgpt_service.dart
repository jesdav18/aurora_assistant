import 'package:dio/dio.dart';
import '../config/app_config.dart';
import 'location_service.dart';
import 'navigation_service.dart';

class ChatGPTService {
  final Dio _dio = Dio();
  final LocationService _locationService = LocationService();
  final NavigationService _navigationService = NavigationService();
  final List<Map<String, String>> _conversationHistory = [];

  ChatGPTService() {
    _dio.options.headers = {
      'Authorization': 'Bearer ${AppConfig.openAiApiKey}',
      'Content-Type': 'application/json',
    };
    
    _conversationHistory.add({
      'role': 'system',
      'content': AppConfig.systemPrompt,
    });
  }

  Future<String> sendMessage(String message) async {
    try {
      String enhancedMessage = message;
      
      // Comando de prueba para navegaci√≥n
      if (message.toLowerCase().contains('probar navegaci√≥n') || 
          message.toLowerCase().contains('test navigation')) {
        try {
          final testResult = await _locationService.testNavigationFunctionality();
          enhancedMessage = '$message\n\nResultado de prueba: $testResult';
        } catch (e) {
          enhancedMessage = '$message\n\nError en prueba: $e';
        }
      } else if (_isStartNavigationQuery(message)) {
        try {
          final navigationInfo = await _handleStartNavigationQuery(message);
          enhancedMessage = '$message\n\nInformaci√≥n de navegaci√≥n: $navigationInfo';
        } catch (e) {
          enhancedMessage = '$message\n\nError al iniciar navegaci√≥n: $e';
        }
      } else if (_isLocationQuery(message)) {
        try {
          // Usar el m√©todo m√°s apropiado seg√∫n el tipo de consulta
          String locationInfo;
          if (_isSimpleLocationQuery(message)) {
            locationInfo = await _locationService.getSimpleLocationInfo();
          } else {
            locationInfo = await _locationService.getDetailedLocationInfo();
          }
          enhancedMessage = '$message\n\nInformaci√≥n de ubicaci√≥n actual: $locationInfo';
        } catch (e) {
          enhancedMessage = '$message\n\nNota: No se pudo obtener la ubicaci√≥n debido a: $e';
        }
      } else if (_isNavigationQuery(message)) {
        try {
          final navigationInfo = await _handleNavigationQuery(message);
          enhancedMessage = '$message\n\nInformaci√≥n de navegaci√≥n: $navigationInfo';
        } catch (e) {
          enhancedMessage = '$message\n\nNota: No se pudo procesar la consulta de navegaci√≥n debido a: $e';
        }
      }

      _conversationHistory.add({
        'role': 'user',
        'content': enhancedMessage,
      });

      final requestData = {
        'model': AppConfig.chatGptModel,
        'messages': _conversationHistory,
        'max_tokens': AppConfig.maxTokens,
        'temperature': AppConfig.temperature,
        'top_p': 1.0,
        'frequency_penalty': 0.0,
        'presence_penalty': 0.0,
      };

      final response = await _dio.post(
        '${AppConfig.openAiBaseUrl}/chat/completions',
        data: requestData,
        options: Options(
          validateStatus: (status) => status != null && status < 500,
        ),
      );

      if (response.statusCode == 200) {
        final choices = response.data['choices'] as List?;
        if (choices == null || choices.isEmpty) {
          throw Exception('No se recibi√≥ respuesta del modelo');
        }

        final assistantMessage = choices[0]['message']['content'] as String?;
        if (assistantMessage == null || assistantMessage.isEmpty) {
          throw Exception('Respuesta vac√≠a del modelo');
        }

        _conversationHistory.add({
          'role': 'assistant',
          'content': assistantMessage,
        });

        if (_conversationHistory.length > AppConfig.maxConversationHistory) {
          _conversationHistory.removeRange(1, _conversationHistory.length - 15);
        }

        return assistantMessage.trim();
      } else {
        final error = response.data['error']?['message'] ?? 'Error desconocido';
        throw Exception('Error de ChatGPT API: $error');
      }
    } on DioException catch (e) {
      if (e.type == DioExceptionType.connectionTimeout) {
        throw Exception('Tiempo de conexi√≥n agotado');
      } else if (e.type == DioExceptionType.receiveTimeout) {
        throw Exception('Tiempo de respuesta agotado');
      } else {
        throw Exception('Error de red: ${e.message}');
      }
    } catch (e) {
      throw Exception('Error al enviar mensaje: $e');
    }
  }

  bool _isLocationQuery(String message) {
    final locationKeywords = [
      'ubicaci√≥n', 'ubicacion', 'donde estoy', 'd√≥nde estoy', 'donde me encuentro',
      'mi posici√≥n', 'mi posicion', 'coordenadas', 'direcci√≥n', 'direccion',
      'lugar', 'sitio', 'localizaci√≥n', 'localizacion', 'gps', 'maps',
      'estoy en', 'me encuentro en', 'mi ubicaci√≥n', 'mi ubicacion'
    ];
    
    final messageLower = message.toLowerCase();
    return locationKeywords.any((keyword) => messageLower.contains(keyword));
  }

  bool _isNavigationQuery(String message) {
    final navigationKeywords = [
      'ruta', 'camino', 'direcci√≥n', 'direccion', 'como llegar', 'c√≥mo llegar',
      'navegar', 'conducir', 'ir a', 'llevar', 'mejor ruta', 'ruta m√°s r√°pida',
      'ruta m√°s corta', 'calcular ruta', 'planificar ruta', 'waypoints',
      'pasando por', 'a trav√©s de', 'por donde', 'alternativas'
    ];
    
    final messageLower = message.toLowerCase();
    return navigationKeywords.any((keyword) => messageLower.contains(keyword));
  }

  Future<String> _handleNavigationQuery(String message) async {
    final messageLower = message.toLowerCase();
    
    print('üîç Procesando consulta de navegaci√≥n: $message');
    
    // Detectar si es b√∫squeda de lugar
    if (_isPlaceSearchQuery(message)) {
      print('üìç Detectada b√∫squeda de lugar');
      final placeQuery = _extractPlaceQuery(message);
      if (placeQuery.isNotEmpty) {
        print('üîé Buscando lugar: $placeQuery');
        return await _locationService.searchPlace(placeQuery);
      }
    }
    
    // Detectar si es c√°lculo de ruta
    if (_isRouteCalculationQuery(message)) {
      print('üó∫Ô∏è Detectado c√°lculo de ruta');
      final routeInfo = _extractRouteInfo(message);
      print('üéØ Informaci√≥n de ruta extra√≠da: $routeInfo');
      
      if (routeInfo['destination'] != null) {
        final destination = routeInfo['destination'] as String;
        print('üìç Destino: $destination');
        
        if (routeInfo['waypoints'] != null && routeInfo['waypoints'].isNotEmpty) {
          print('üõ£Ô∏è Calculando ruta con waypoints');
          return await _locationService.calculateRoute(
            destination,
            waypoints: routeInfo['waypoints'],
          );
        } else {
          print('üõ£Ô∏è Calculando mejor ruta');
          return await _locationService.calculateBestRoute(destination);
        }
      } else {
        print('‚ùå No se pudo extraer el destino de la consulta');
      }
    }
    
    print('‚ùå No se pudo procesar la consulta de navegaci√≥n');
    return 'Por favor, especifica un destino para calcular la ruta. Por ejemplo: "Calcula la ruta a Madrid" o "¬øC√≥mo llego al aeropuerto?" o "Mejor ruta a Choloma"';
  }

  bool _isPlaceSearchQuery(String message) {
    final searchKeywords = [
      'buscar', 'encontrar', 'd√≥nde est√°', 'donde esta', 'localizar',
      'hay un', 'hay una', 'existe', 'cerca de', 'cerca a'
    ];
    
    final messageLower = message.toLowerCase();
    return searchKeywords.any((keyword) => messageLower.contains(keyword));
  }

  bool _isRouteCalculationQuery(String message) {
    final routeKeywords = [
      'ruta a', 'ruta hacia', 'ruta para', 'camino a', 'camino hacia', 'camino para',
      'direcci√≥n a', 'direccion a', 'direcci√≥n hacia', 'direccion hacia',
      'como llegar a', 'c√≥mo llegar a', 'como llegar hacia', 'c√≥mo llegar hacia',
      'ir a', 'llevar a', 'conducir a', 'navegar a', 'mejor ruta', 'ruta m√°s r√°pida',
      'ruta m√°s corta', 'calcular ruta', 'planificar ruta', 'ruta para ir',
      'mejor ruta para', 'ruta m√°s r√°pida para', 'ruta m√°s corta para'
    ];
    
    final messageLower = message.toLowerCase();
    return routeKeywords.any((keyword) => messageLower.contains(keyword));
  }

  String _extractPlaceQuery(String message) {
    // Extraer el lugar a buscar despu√©s de palabras clave
    final searchPatterns = [
      RegExp(r'buscar\s+(.+)', caseSensitive: false),
      RegExp(r'encontrar\s+(.+)', caseSensitive: false),
      RegExp(r'd√≥nde est√°\s+(.+)', caseSensitive: false),
      RegExp(r'donde esta\s+(.+)', caseSensitive: false),
      RegExp(r'localizar\s+(.+)', caseSensitive: false),
    ];
    
    for (final pattern in searchPatterns) {
      final match = pattern.firstMatch(message);
      if (match != null) {
        return match.group(1)?.trim() ?? '';
      }
    }
    
    return '';
  }

  Map<String, dynamic> _extractRouteInfo(String message) {
    final routePatterns = [
      // Patrones m√°s espec√≠ficos primero
      RegExp(r'mejor ruta\s+(?:para\s+)?(?:ir\s+)?(?:de\s+mi\s+ubicaci√≥n\s+)?(?:hacia|a|para)\s+(.+)', caseSensitive: false),
      RegExp(r'ruta\s+(?:m√°s\s+)?(?:r√°pida|corta)\s+(?:para\s+)?(?:ir\s+)?(?:hacia|a|para)\s+(.+)', caseSensitive: false),
      RegExp(r'calcular\s+ruta\s+(?:para\s+)?(?:ir\s+)?(?:hacia|a|para)\s+(.+)', caseSensitive: false),
      RegExp(r'planificar\s+ruta\s+(?:para\s+)?(?:ir\s+)?(?:hacia|a|para)\s+(.+)', caseSensitive: false),
      // Patrones generales
      RegExp(r'ruta\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      RegExp(r'camino\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      RegExp(r'direcci√≥n\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      RegExp(r'direccion\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      RegExp(r'como llegar\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      RegExp(r'c√≥mo llegar\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      RegExp(r'ir\s+a\s+(.+)', caseSensitive: false),
      RegExp(r'llevar\s+a\s+(.+)', caseSensitive: false),
      RegExp(r'conducir\s+a\s+(.+)', caseSensitive: false),
      RegExp(r'navegar\s+a\s+(.+)', caseSensitive: false),
      // Patrones adicionales para casos espec√≠ficos
      RegExp(r'mejor\s+ruta\s+(.+)', caseSensitive: false),
      RegExp(r'ruta\s+para\s+ir\s+(.+)', caseSensitive: false),
    ];
    
    String? destination;
    List<String> waypoints = [];
    
    for (final pattern in routePatterns) {
      final match = pattern.firstMatch(message);
      if (match != null) {
        destination = match.group(1)?.trim();
        break;
      }
    }
    
    // Extraer waypoints si existen
    final waypointPatterns = [
      RegExp(r'pasando\s+por\s+(.+)', caseSensitive: false),
      RegExp(r'a\s+trav√©s\s+de\s+(.+)', caseSensitive: false),
      RegExp(r'por\s+donde\s+(.+)', caseSensitive: false),
    ];
    
    for (final pattern in waypointPatterns) {
      final match = pattern.firstMatch(message);
      if (match != null) {
        final waypointText = match.group(1)?.trim() ?? '';
        if (waypointText.isNotEmpty) {
          waypoints.add(waypointText);
        }
      }
    }
    
    return {
      'destination': destination,
      'waypoints': waypoints.isNotEmpty ? waypoints : null,
    };
  }

  bool _isSimpleLocationQuery(String message) {
    final simpleLocationKeywords = [
      'donde estoy', 'd√≥nde estoy', 'donde me encuentro', 'estoy en', 
      'me encuentro en', 'mi ubicaci√≥n', 'mi ubicacion', 'lugar', 'sitio'
    ];
    
    final messageLower = message.toLowerCase();
    return simpleLocationKeywords.any((keyword) => messageLower.contains(keyword));
  }

  bool _isStartNavigationQuery(String message) {
    final startNavigationKeywords = [
      'iniciar navegaci√≥n', 'iniciar ruta', 'empezar navegaci√≥n', 'empezar ruta',
      'navegar a', 'conducir a', 'llevar a', 'ir a', 'inicia navegaci√≥n',
      'empieza navegaci√≥n', 'comenzar navegaci√≥n', 'comenzar ruta',
      'start navigation', 'begin navigation', 'navigate to'
    ];
    
    final messageLower = message.toLowerCase();
    return startNavigationKeywords.any((keyword) => messageLower.contains(keyword));
  }

  Future<String> _handleStartNavigationQuery(String message) async {
    print('üöÄ Procesando inicio de navegaci√≥n: $message');
    
    // Extraer destino
    final destination = _extractDestinationFromStartNavigation(message);
    if (destination.isEmpty) {
      return 'Por favor, especifica un destino para iniciar la navegaci√≥n. Por ejemplo: "Iniciar navegaci√≥n a Madrid"';
    }
    
    print('üìç Destino para navegaci√≥n: $destination');
    
    // Verificar si ya estamos navegando
    if (_navigationService.isNavigating) {
      return 'Ya est√°s navegando hacia ${_navigationService.destinationName}. ¬øQuieres detener la navegaci√≥n actual?';
    }
    
    // Iniciar navegaci√≥n
    final success = await _navigationService.startNavigation(destination);
    print('‚úÖ Resultado de startNavigation: $success');
    print('üìç DestinationName despu√©s de startNavigation: ${_navigationService.destinationName}');
    
    if (success) {
      return 'Navegaci√≥n iniciada hacia $destination. Abriendo mapa de navegaci√≥n...';
    } else {
      return 'No se pudo iniciar la navegaci√≥n hacia $destination. Verifica que el destino sea v√°lido.';
    }
  }

  String _extractDestinationFromStartNavigation(String message) {
    print('üîç Extrayendo destino de: "$message"');
    
    final startNavigationPatterns = [
      // Patrones m√°s espec√≠ficos para "empieza navegaci√≥n hacia"
      RegExp(r'empieza\s+navegaci√≥n\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      RegExp(r'inicia\s+navegaci√≥n\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      RegExp(r'comenzar\s+navegaci√≥n\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      RegExp(r'empezar\s+navegaci√≥n\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      RegExp(r'iniciar\s+navegaci√≥n\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      // Patrones para rutas
      RegExp(r'empieza\s+ruta\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      RegExp(r'inicia\s+ruta\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      RegExp(r'comenzar\s+ruta\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      RegExp(r'empezar\s+ruta\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      RegExp(r'iniciar\s+ruta\s+(?:a|hacia|para)\s+(.+)', caseSensitive: false),
      // Patrones generales
      RegExp(r'navegar\s+a\s+(.+)', caseSensitive: false),
      RegExp(r'conducir\s+a\s+(.+)', caseSensitive: false),
      RegExp(r'llevar\s+a\s+(.+)', caseSensitive: false),
      RegExp(r'ir\s+a\s+(.+)', caseSensitive: false),
    ];
    
    for (int i = 0; i < startNavigationPatterns.length; i++) {
      final pattern = startNavigationPatterns[i];
      final match = pattern.firstMatch(message);
      if (match != null) {
        String destination = match.group(1)?.trim() ?? '';
        
        // Limpiar el destino: remover puntos, comas y otros caracteres al final
        destination = destination.replaceAll(RegExp(r'[.,;!?]+$'), '').trim();
        
        print('‚úÖ Patr√≥n $i coincidi√≥: "$destination"');
        return destination;
      }
    }
    
    print('‚ùå Ning√∫n patr√≥n coincidi√≥');
    return '';
  }

  // Getter para acceder al servicio de navegaci√≥n
  NavigationService get navigationService => _navigationService;

  void clearHistory() {
    _conversationHistory.clear();
    _conversationHistory.add({
      'role': 'system',
      'content': AppConfig.systemPrompt,
    });
  }
} 